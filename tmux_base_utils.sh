#!/usr/bin/env bash

# tmux_base_utils.sh - Fundamental tmux helper functions
# Sourced by tmux_utils1.sh and scripts generated by tmx_generate_script_boilerplate

# shellcheck source=./sh-globals.sh
# shellcheck disable=SC1091
source "sh-globals.sh" || { echo "ERROR: Failed to source sh-globals.sh in tmux_base_utils.sh"; exit 1; }

# ======== TMUX ENVIRONMENT VARIABLE HELPERS ========

# Set a tmux environment variable (global or session-specific)
# Arguments:
#   $1: Variable name
#   $2: Variable value
#   $3: Target session name (optional, defaults to global)
tmx_var_set() {
    local var_name="${1}"
    local var_value="${2}"
    local target_session="${3:-}"
    local output
    if [[ -z "${var_name}" ]]; then
        msg_error "tmx_var_set: Variable name cannot be empty."
        return 1
    fi
    msg_debug "Setting tmux env var: ${var_name}=${var_value} in session '${target_session:-global}'"
    if [[ -n "${target_session}" ]]; then
        # Capture stderr (2>&1) and check return code
        if ! output=$(tmux set-environment -t "${target_session}" "${var_name}" "${var_value}" 2>&1); then
            msg_error "tmx_var_set FAILED for '${var_name}=${var_value}' in session '${target_session}'. tmux output: ${output}"
            return 1
        fi
    else
        # Capture stderr (2>&1) and check return code
        if ! output=$(tmux set-environment -g "${var_name}" "${var_value}" 2>&1); then
            msg_error "tmx_var_set FAILED for global '${var_name}=${var_value}'. tmux output: ${output}"
            return 1
    fi
    fi
    return 0
}

# Get a tmux environment variable (global or session-specific)
# Arguments:
#   $1: Variable name
#   $2: Target session name (optional, defaults to global)
# Returns: The value of the variable (echoed)
tmx_var_get() {
    local var_name="${1}"
    local target_session="${2:-}"
    local value=""
    local output # For capturing command output + stderr

    if [[ -z "${var_name}" ]]; then
        msg_error "tmx_var_get: Variable name cannot be empty."
        return 1
    fi
    msg_debug "Getting tmux env var: ${var_name} from session '${target_session:-global}'"

    # Handle session-specific or global variables
    if [[ -n "${target_session}" ]]; then
        # Capture stderr (2>&1) and check return code
        if ! output=$(tmux show-environment -t "${target_session}" "${var_name}" 2>&1); then
            # Check if the error is just 'unknown variable' (which means unset)
            if [[ "${output}" == *"unknown variable"* ]]; then
                msg_debug "tmx_var_get: Variable '${var_name}' not found/unset in session '${target_session}'"
                echo "" # Echo nothing for unset
                return 0 # Return success for unset variable
            else
                # Log other errors
                msg_error "tmx_var_get FAILED for '${var_name}' in session '${target_session}'. tmux output: ${output}"
                return 1
            fi
        fi
        # Check if the output indicates the variable was unset (starts with -)
        # This is another way tmux might indicate unset, handle both
        if [[ "${output}" == -* ]]; then
             msg_debug "tmx_var_get: Variable '${var_name}' explicitly unset (-) in session '${target_session}'"
             echo ""
             return 0 # Return success for unset variable
        fi
    else # Global variable
        # Capture stderr (2>&1) and check return code
        if ! output=$(tmux show-environment -g "${var_name}" 2>&1); then
            # Check if the error is just 'unknown variable'
            if [[ "${output}" == *"unknown variable"* ]]; then
                msg_debug "tmx_var_get: Global variable '${var_name}' not found/unset"
                echo ""
                return 0 # Return success for unset variable
            else
                msg_error "tmx_var_get FAILED for global '${var_name}'. tmux output: ${output}"
                return 1
            fi
        fi
        # Check if the output indicates the variable was unset (starts with -)
        if [[ "${output}" == -* ]]; then
             msg_debug "tmx_var_get: Global variable '${var_name}' explicitly unset (-)"
             echo ""
             return 0 # Return success for unset variable
        fi
    fi

    # If successful and variable found, extract value
    value=$(echo "${output}" | cut -d= -f2-)
    echo "${value}"
    return 0
}


# ======== TMUX PANE ID/INDEX HELPERS (Usable inside and outside panes) ========

# Get the ID of the current pane (intended for use inside a pane script)
tmx_get_current_pane_id() {
  tmux display-message -p "#{pane_id}"
}

# Get the index of the current pane (intended for use inside a pane script)
tmx_get_current_pane_index() {
  tmux display-message -p "#{pane_index}"
}

# Convert a pane index to its ID within the current session (intended for use inside a pane script)
tmx_index_to_id() {
  local pane_index="$1"
  # Get session name *from within the pane*
  local session
  session=$(tmux display-message -p '#S')

  tmux list-panes -t "${session}" -F "#{pane_index} #{pane_id}" |
  grep "^${pane_index} %" | awk '{print $2}'
}

# Convert a pane ID to its index within the current session (intended for use inside a pane script)
tmx_id_to_index() {
  local pane_id="$1"
  # Get session name *from within the pane*
  local session
  session=$(tmux display-message -p '#S')

  # Ensure pane_id has % prefix
  if [[ "$pane_id" != %* ]]; then
    pane_id="%$pane_id"
  fi

  tmux list-panes -t "${session}" -F "#{pane_id} #{pane_index}" |
  grep "^${pane_id} " | awk '{print $2}'
}

# Get pane ID for a specific pane index in a session (intended for use outside pane script)
# Arguments:
#   $1: Session name
#   $2: Pane index
# Returns: The pane ID in %ID format
tmx_get_pane_id() {
    local session="${1}"
    local pane_index="${2}"

    local pane_id
    pane_id=$(tmux list-panes -t "${session}" -F "#{pane_index} #{pane_id}" | grep "^${pane_index} %" | awk '{print $2}')

    if [[ -n "${pane_id}" ]]; then
        echo "${pane_id}"
        return 0
    else
        # Use msg_error if sh-globals are sourced, otherwise simple echo
        if declare -f msg_error &> /dev/null; then
            msg_error "Could not find pane with index ${pane_index} in session ${session}"
        else
            echo "ERROR: Could not find pane with index ${pane_index} in session ${session}" >&2
        fi
        msg_debug "Pane ID lookup failed for index ${pane_index} in session ${session}"
        return 1
    fi
}

# Kill a pane by its ID (stable, doesn't change when other panes are added/removed)
# Can be used both inside and outside panes.
# Arguments:
#   $1: Pane ID (in %ID format)
# Returns: 0 on success, 1 on failure
tmx_kill_pane_by_id() {
    local pane_id="$1"
    local target_pane

    if [[ -z "$pane_id" ]]; then
        msg_error "Usage: tmx_kill_pane_by_id %PANE_ID"
        return 1
    fi

    # Ensure pane_id has % prefix
    if [[ "$pane_id" != %* ]]; then
        pane_id="%$pane_id"
    fi

    # Check if pane exists using the ID directly
    if tmux list-panes -a -F '#{pane_id}' | grep -q "^${pane_id}$"; then
        msg_debug "Found pane ${pane_id}. Killing it..."
        tmux kill-pane -t "$pane_id"
        local kill_status=$?
        msg_debug "Kill status for pane ${pane_id}: ${kill_status}"
        return $kill_status
    else
        msg_warning "Pane with ID ${pane_id} not found (or already closed)."
        return 1
    fi
}

# Define session self-destruct function (intended for use inside pane script)
tmx_self_destruct() {
  # Get session name *from within the pane*
  local session_name
  session_name=$(tmux display-message -p '#S')
  msg_info "Closing session ${session_name} from within pane..."
  # Run in background to allow the message to display before killing
  ( sleep 0.5; tmux kill-session -t "${session_name}" ) &
} 