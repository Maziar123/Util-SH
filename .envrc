#!/bin/bash

# Get current directory
echo "üìÇ Current directory: ${PWD}"

# Get parent directory path
PARENT_DIR="$(dirname "${PWD}")"
echo "üìÇ Parent directory: ${PARENT_DIR}"

# Define Util-sh name as a variable
UTIL_SH_NAME="Util-Sh"

# Define Util-sh folder in parent directory
export UTIL_SH_DIR="${PARENT_DIR}/${UTIL_SH_NAME}"
echo "üîß ${UTIL_SH_NAME} directory: ${UTIL_SH_DIR}"

# Check if Util-sh directory exists
if [[ -d "${UTIL_SH_DIR}" ]]; then
    echo "‚úÖ ${UTIL_SH_NAME} directory found!"
    
    # Add Util-sh to PATH if it exists
    PATH_add "${UTIL_SH_DIR}"
    echo "‚úÖ Added ${UTIL_SH_NAME} to PATH"
    
    # Optionally, you can also set environment variables for specific scripts
    export UTIL_SCRIPTS_AVAILABLE="true"
else
    echo "‚ö†Ô∏è ${UTIL_SH_NAME} directory not found in parent directory!"
    
    # Optionally create the directory automatically
    # mkdir -p "${UTIL_SH_DIR}"
    # echo "‚úÖ Created ${UTIL_SH_NAME} directory"
fi

# Example of sourcing a specific utility file if it exists
if [[ -f "${UTIL_SH_DIR}/common_functions.sh" ]]; then
    echo "üîÑ Loading common functions from ${UTIL_SH_NAME}"
    # To actually source the file, you would uncomment:
    # source "${UTIL_SH_DIR}/common_functions.sh"
    # But be careful with sourcing in direnv as it changes behavior
fi

echo "‚ú® Environment setup complete!"
